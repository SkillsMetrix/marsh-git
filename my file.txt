
import { Actions, createEffect, ofType } from '@ngrx/effects'
import { } from '@ngrx/store'
import { DataService } from 'src/app/Service/data.service'
import { getMovies, getMoviesSuccess } from '../Actions/movie.action'
import { exhaustMap, map } from 'rxjs/operators'

export class MovieEffects {
    loadMovies$ = createEffect(() =>
        this.action$.pipe(
            ofType(getMovies),
            exhaustMap(() =>
                this.ds.getMovies().pipe(
                    map((movies) => getMoviesSuccess(movies))
                )
            )
        )

    )
    constructor(private action$: Actions, private ds: DataService) { }
}
-------


import { createReducer, on } from '@ngrx/store'
import { Movie } from 'src/app/Models/movie'
import { addMovies, getMovies, getMoviesSuccess } from '../Actions/movie.action'

export interface MovieState {

    movies: ReadonlyArray<Movie>
}

const initialState: ReadonlyArray<Movie> = []

export const movieReducer = createReducer(

    initialState,
    on(getMoviesSuccess, (state,movies) => movies),
    on(addMovies,(state,movie) => [...state,movie])
)

---




import { createAction } from '@ngrx/store'
import { Movie } from 'src/app/Models/movie'

export const getMovies=createAction('Movie get ')
export const getMoviesSuccess=createAction('Movie get Success ',
(movies:ReadonlyArray<Movie>)=>movies)
export const addMovies=createAction('Movie add ',(movie:Movie)=>movie )
